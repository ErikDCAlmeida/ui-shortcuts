// Display
$displays: block, inline, inline-block, flex, grid, inline-flex, inline-grid,
  none;

@each $display in $displays {
  .#{$display} {
    display: #{$display} !important;
  }
}

$flex: (
  start: flex-start,
  end: flex-end,
  center: center,
  stretch: stretch,
  baseline: baseline,
  evenly: space-evenly,
  around: space-around,
  between: space-between,
  inherit: inherit,
  initial: initial,
  unset: unset,
);

// Flex Justifies
@each $name, $item in $flex {
  .j-#{$name} {
    justify-content: #{$item} !important;
  }
}

// Flex Alignments
@each $name, $item in $flex {
  .a-#{$name} {
    align-items: #{$item} !important;
  }
}

// Flex Self Alignments
@each $name, $item in $flex {
  .as-#{$name} {
    align-self: #{$item} !important;
  }
}

// Flex Justifies Alignments
.start {
  justify-content: flex-start !important;
  align-items: flex-start !important;
}

.start-end {
  justify-content: flex-start !important;
  align-items: flex-end !important;
}

.start-center {
  justify-content: flex-start !important;
  align-items: center !important;
}

.center-start {
  justify-content: center !important;
  align-items: flex-start !important;
}

.center {
  justify-content: center !important;
  align-items: center !important;
}

.center-end {
  justify-content: center !important;
  align-items: flex-end !important;
}

.end-start {
  justify-content: flex-end !important;
  align-items: flex-start !important;
}

.end-center {
  justify-content: flex-end !important;
  align-items: center !important;
}

.end {
  justify-content: flex-end !important;
  align-items: flex-end !important;
}

// Text Align
.text-l {
  text-align: left !important;
}

.text-c {
  text-align: center !important;
}

.text-j {
  text-align: justify !important;
}

.text-r {
  text-align: right !important;
}

// Flexs
.flex-1 {
  flex: 1 !important;
}

.flex-0 {
  flex: 0 auto !important;
}

// Position Displays
.row {
  flex-direction: row !important;
}

.col {
  flex-direction: column !important;
}

.row-r {
  flex-direction: row-reverse !important;
}

.col-r {
  flex-direction: column-reverse !important;
}

// Fill Dimensions
.fill-w {
  width: 100% !important;
}

.fill-h {
  height: 100% !important;
}

.fill-a {
  @extend .fill-w, .fill-h;
}

// Fill Screen
.fill-sw {
  width: 100vw !important;
}

.fill-sh {
  height: 100vh !important;
}

.fill-sa {
  @extend .fill-sw, .fill-sh;
}

.wrap {
  flex-wrap: wrap;
}

.no-wrap {
  flex-wrap: nowrap;
}

// Text decorations
$decorations: overline, line-through, underline;

@each $decoration in $decorations {
  .#{$decoration} {
    text-decoration: #{$decoration} !important;
  }
}

// Text Transform
$transforms: uppercase, lowercase, capitalize;

@each $transform in $transforms {
  .#{$transform} {
    text-transform: #{$transform} !important;
  }
}

// Cursor Pointers
$pointers: auto, default, none, context-menu, help, pointer, progress, wait,
  cell, crosshair, text, vertical-text, alias, copy, move, no-drop, not-allowed,
  all-scroll, col-resize, row-resize, n-resize, e-resize, s-resize, w-resize,
  ne-resize, nw-resize, se-resize, sw-resize, ew-resize, ns-resize, nesw-resize,
  nwse-resize, zoom-in, zoom-out, grab, grabbing;

@each $pointer in $pointers {
  .c-#{$pointer} {
    cursor: #{$pointer} !important;
  }
}

// Border Size and Position
@for $number from 1 through 10 {
  .b-#{$number} {
    border: #{$number}+ px solid rgb(0, 0, 0) !important;

    &--top {
      border-top: #{$number}+ px solid rgb(0, 0, 0) !important;
    }

    &--left {
      border-left: #{$number}+ px solid rgb(0, 0, 0) !important;
    }

    &--bottom {
      border-bottom: #{$number}+ px solid rgb(0, 0, 0) !important;
    }

    &--right {
      border-right: #{$number}+ px solid rgb(0, 0, 0) !important;
    }
  }
}

@for $number from 1 to 10 {
  .br-#{$number} {
    border-radius: #{$number} + px !important;
  }
}
